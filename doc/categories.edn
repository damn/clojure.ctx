{:app [start-app! post-runnable! exit-app!]
 :app.input [button-just-pressed? key-just-pressed? key-pressed?]
 :component [defcomponent defcomponent* defsystem defsystems component-attributes ->mk info-text]
 :counter [->counter elapsed-time finished-ratio reset stopped?]
 :ctx [error-window! play-sound! set-cursor! add-world-ctx]
 :effects [do! effect!]
 :entity [->inventory-window ->inventory-window-data ->modified-value uids-entities all-entities can-pickup-item? clicked-inventory-cell clicked-skillmenu-skill collides? create destroy direction effect-body-props enemy-faction enter entity-stat entity-state entity-tile exit friendly-faction get-entity has-skill? hpbar-height-px k->pretty-name line-of-sight? manual-tick map->Entity map->ImmutableAnimation max-delta-time mod-info-text movement-speed-schema pause-game? player-enter projectile-size remove-destroyed-entities! render render-above render-below render-entities! render-info render-order sort-by-order stackable? state-obj tick tick-entities! valid-slot?]
 :geometry [circle->outer-rectangle point-in-rect? shape-collides? v-add v-direction v-distance v-get-angle-from-vector v-get-normal-vectors v-length v-normalise v-normalised? v-scale fast-ray-blocked?]
 :view.gui [gui-mouse-position gui-viewport-height gui-viewport-width render-gui-view! stage-add! stage-get]
 :view.world  [world-camera world-delta world-mouse-position world-unit-scale world-viewport-height world-viewport-width render-world-view!]
 :graphics [frames-per-second delta-time ->color ->texture-region black white def-markup-color texture-region-dimensions draw-arc draw-centered-image draw-circle draw-ellipse draw-filled-circle draw-filled-ellipse draw-filled-rectangle draw-grid draw-image draw-item-on-cursor draw-line draw-rectangle draw-rotated-centered-image draw-sector draw-text pixels->world-units with-shape-line-width draw-tiled-map]
 :graphics.images [sprite sprite-sheet ->image sub-image]
 :graphics.camera [frustum zoom calculate-zoom camera-position camera-set-position! visible-tiles reset-zoom! set-zoom!]
 :operation [op-apply op-order op-value-text ]
 :properties [def-attributes def-type all-properties build-property ]
 :ui [->button-group ->check-box ->click-listener ->group ->horizontal-group ->horizontal-separator-cell ->label ->scroll-pane ->select-box ->split-pane ->stack ->t-node ->table ->text-field ->texture-region-drawable ->tinted-drawable ->ui-actor ->ui-image-button ->ui-image-widget ->ui-stage ->ui-tree ->ui-widget ->vertical-group ->vertical-separator-cell ->window button?  add-actor!  add-listener!  add-rows!  bg-add!  bg-checked bg-remove!  children clear-children! find-actor-with-id find-ancestor-window pack-ancestor-window! remove-tooltip! set-cell-opts  set-drawable! set-min-size!  set-table-opts window-title-bar? t-node-add! ->actor ->background-image ->image-button ->image-widget ->scroll-pane-cell ->text-button ->stage add-tooltip! mouse-on-actor?]
 :ui-actor [a-mouseover?  actor-id actor-name actor-x actor-y  set-id! set-center! parent remove! set-name! set-position! set-touchable! set-visible! visible? toggle-visible! ]
 :ui-stage [s-add! s-clear! s-root]
 :ui-table [t-add! t-clear! t-row!]
 :screen [screen-enter screen-exit screen-render change-screen current-screen]
 :utils [bind-root dispose! find-first ->tile get-namespaces get-vars index-of readable-number safe-get safe-merge tile->middle clamp equal? add-metadoc! ->info-text create-vs val-max-ratio]
 :world.ctx [content-grid explored-tile-corners mouseover-entity mouseover-entity* world-grid world-paused? world-raycaster world-widgets]
 :world [ active-entities blocked?  blocks-vision?  cached-adjacent-cells cells->entities circle->cells circle->entities   logic-frame nearest-entity nearest-entity-distance occupied-by-other? path-blocked?  point->entities potential-fields-follow-to-enemy ray-blocked? rectangle->cells
         player-entity]
 }
